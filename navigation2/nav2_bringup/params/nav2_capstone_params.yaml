# =========================
#  NAV2 CAPSTONE PARAMETERS
#  (based on nav2_params.yaml)
# =========================

# ---------- BT NAVIGATOR ----------
bt_navigator:
  ros__parameters:
    use_sim_time: True
    global_frame: map
    robot_base_frame: base_link
    odom_topic: /odom
    bt_loop_duration: 10            # [sec]
    default_server_timeout: 30
    wait_for_service_timeout: 1000

    # ▶ 최소 plug-in (Recovery / AssistedTeleop 등 제거)
    plugin_lib_names:
      - nav2_compute_path_to_pose_action_bt_node
      - nav2_smooth_path_action_bt_node
      - nav2_clear_costmap_service_bt_node
      - nav2_follow_path_action_bt_node
      - nav2_goal_reached_condition_bt_node
      - nav2_goal_updated_condition_bt_node
      - nav2_rate_controller_bt_node
      - nav2_pipeline_sequence_bt_node
      - nav2_back_up_action_bt_node

bt_navigator_navigate_through_poses_rclcpp_node:
  ros__parameters:
    use_sim_time: True

bt_navigator_navigate_to_pose_rclcpp_node:
  ros__parameters:
    use_sim_time: True

# ---------- CONTROLLER SERVER ----------
controller_server:
  ros__parameters:
    use_sim_time: True
    controller_frequency: 20.0
    min_x_velocity_threshold: 0.05
    min_y_velocity_threshold: 0.05
    min_theta_velocity_threshold: 0.1
    failure_tolerance: -1.0
    progress_checker_plugin: "progress_checker"
    goal_checker_plugins: ["general_goal_checker"]  # "precise_goal_checker"
    controller_plugins: ["FollowPath"]

    # Progress checker parameters
    progress_checker:
      plugin: "nav2_controller::SimpleProgressChecker"
      required_movement_radius: 0.5
      movement_time_allowance: 30.0

    general_goal_checker:
      stateful: True
      plugin: "nav2_controller::SimpleGoalChecker"
      xy_goal_tolerance: 0.3
      yaw_goal_tolerance: 1.0

    # DWB local-planner parameters (TurtleBot3 기본값 변형)
    FollowPath:
      plugin: "dwb_core::DWBLocalPlanner"
      debug_trajectory_details: True
      min_vel_x: 0.0
      min_vel_y: 0.0
      max_vel_x: 0.8
      max_vel_y: 0.0
      max_vel_theta: 1.0
      min_speed_xy: 0.0
      max_speed_xy: 0.8
      min_speed_theta: 0.0
      acc_lim_x: 2.0
      acc_lim_y: 0.0
      acc_lim_theta: 0.05
      decel_lim_x: -2.0
      decel_lim_y: 0.0
      decel_lim_theta: -0.05
      vx_samples: 20
      vy_samples: 1
      vtheta_samples: 20
      sim_time: 3.0
      linear_granularity: 0.05
      angular_granularity: 0.025
      transform_tolerance: 1.5
      xy_goal_tolerance: 0.5
      trans_stopped_velocity: 0.05
      short_circuit_trajectory_evaluation: True
      stateful: True

      critics: ["ObstacleFootprint", "Oscillation", "BaseObstacle",
                "GoalAlign", "PathAlign", "PathDist", "GoalDist", "ObstacleSpeedCritic", "HighSpeedCritic"]
      # ObstacleSpeedCritic:
      #   plugin: "dwb_critics::ObstacleSpeedCritic"
      #   full_speed_distance: 4.0   # 4 m 밖엔 제한 없음
      #   stop_distance: 2.5   # 2 m 이내 완전 정지
      #   scale: 1.0 # 선속도 가중치
      #   yaw_scale: 0.2 # 각속도 가중치
      #   obstacle_state: 0
      #   obstacle_distance: 100.0

      # HighSpeedCritic:
      #   plugin: "dwb_critics::HighSpeedCritic"
      #   scale: 0.01    # (300~800 사이로 조정하며 실험)
      #   v_max: 0.8     # 로봇 최고 속도
      

      # ---------- ObstacleSpeedCritic ----------
      ObstacleSpeedCritic.plugin:           "dwb_critics::ObstacleSpeedCritic"
      ObstacleSpeedCritic.full_speed_distance: 4.0
      ObstacleSpeedCritic.stop_distance:       2.0
      ObstacleSpeedCritic.scale:               2.75
      ObstacleSpeedCritic.yaw_scale:           0.2

      # ---------- HighSpeedCritic ----------
      HighSpeedCritic.plugin:  "dwb_critics::HighSpeedCritic"
      HighSpeedCritic.scale:   0.01
      HighSpeedCritic.v_max:   0.8



      ObstacleFootprint.scale: 1.0      # 충돌 셀은 무조건 제외
      BaseObstacle.scale: 2.0
      PathAlign.scale: 1.0
      PathAlign.forward_point_distance: 0.1
      GoalAlign.scale: 0.5
      GoalAlign.forward_point_distance: 0.1
      PathDist.scale: 0.5
      GoalDist.scale: 2.0
      # RotateToGoal.scale: 2.0
      # RotateToGoal.slowing_factor: 1.0
      # RotateToGoal.lookahead_time: -1.0

    # # DWB (남욱 4/28)
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.0
    #   max_vel_x: 0.5
    #   min_vel_y: 0.0
    #   max_vel_y: 0.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 0.5
    #   min_speed_theta: 0.0
    #   max_vel_theta: 0.7
    #   acc_lim_x: 1.0
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 1.0
    #   decel_lim_x: -1.0
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -1.0
    #   vx_samples: 20
    #   vy_samples: 1
    #   vtheta_samples: 1
    #   sim_time: 2.0
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.3
    #   trans_stopped_velocity: 0.1
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   BaseObstacle.scale: 0.02
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 32.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   # RotateToGoal.scale: 0.0  # 필요시 제외

    #dwb(남욱6/3)
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.0
    #   min_vel_y: 0.0
    #   max_vel_x: 0.5
    #   max_vel_y: 0.0
    #   max_vel_theta: 1.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 0.26 
    #   min_speed_theta: 0.0
    #   # Add high threshold velocity for turtlebot 3 issue.
    #   # https://github.com/ROBOTIS-GIT/turtlebot3_simulations/issues/75
    #   acc_lim_x: 2.5
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 3.2
    #   decel_lim_x: -2.5
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -3.2
    #   vx_samples: 20
    #   vy_samples: 5
    #   vtheta_samples: 20
    #   sim_time: 8.0 #5.0
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.25
    #   trans_stopped_velocity: 0.25
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   # critics: ["RotateToGoal", "Oscillation", "BaseObstacle",
    #   #           "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   critics: ["ObstacleFootprint", "RotateToGoal", "Oscillation", "BaseObstacle",
    #             "GoalAlign", "PathAlign", "PathDist", "GoalDist"]
    #   ObstacleFootprint.scale: 1.0      # 충돌 셀은 무조건 제외
    #   BaseObstacle.scale: 20.0 #10.0
    #   PathAlign.scale: 1.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 1.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 1.0
    #   GoalDist.scale: 1.0
    #   RotateToGoal.scale: 1.0
    #   RotateToGoal.slowing_factor: 5.0
    #   RotateToGoal.lookahead_time: -1.0

    # # MPPI (남욱 4/28)
    # FollowPath:
    #   plugin: "nav2_mppi_controller::MPPIController"
    #   time_steps: 56
    #   model_dt: 0.05
    #   batch_size: 2000
    #   vx_std: 0.2
    #   vy_std: 0.0
    #   wz_std: 0.4
    #   vx_max: 0.5
    #   vx_min: 0.0
    #   vy_max: 0.0
    #   wz_max: 1.9
    #   ax_max: 3.0
    #   ax_min: -3.0
    #   ay_min: 0.0
    #   ay_max: 0.0
    #   az_max: 3.5
    #   iteration_count: 1
    #   prune_distance: 1.7
    #   transform_tolerance: 0.1
    #   temperature: 0.3
    #   gamma: 0.015
    #   motion_model: "Ackermann"  # Ackermann 모드 설정
    #   visualize: false
    #   reset_period: 1.0
    #   regenerate_noises: false
    #   AckermannConstraints:
    #     min_turning_r: 1.5  # 차량 물리적 특성에 맞게 조정
    #   critics: ["ConstraintCritic", "GoalCritic", "PathAlignCritic", "PreferForwardCritic"]
    #   ConstraintCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 4.0
    #   GoalCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 5.0
    #     threshold_to_consider: 1.4
    #   PathAlignCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 14.0
    #     max_path_occupancy_ratio: 0.05
    #     trajectory_point_step: 4
    #   PreferForwardCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 100.0

    #dwb(남욱6/3)
    # FollowPath:
    #   plugin: "nav2_mppi_controller::MPPIController"
    #   time_steps: 100
    #   model_dt: 0.05
    #   batch_size: 3000
    #   vx_std: 0.1
    #   vy_std: 0.0
    #   wz_std: 0.3
    #   vx_max: 0.5
    #   vx_min: 0.0
    #   vy_max: 0.0
    #   wz_max: 1.9
    #   ax_max: 3.0
    #   ax_min: -3.0
    #   ay_min: 0.0
    #   ay_max: 0.0
    #   az_max: 3.5
    #   iteration_count: 10
    #   prune_distance: 1.7
    #   transform_tolerance: 0.3
    #   temperature: 0.3
    #   gamma: 0.015
    #   motion_model: "Ackermann"
    #   visualize: true
    #   reset_period: 1.0
    #   regenerate_noises: false
    #   AckermannConstraints:
    #     min_turning_r: 0.7
    #   critics: ["ConstraintCritic", "GoalCritic", "PathAlignCritic", "PreferForwardCritic"]
    #   ConstraintCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 15.0
    #   GoalCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 30.0
    #     threshold_to_consider: 0.3
    #   PathAlignCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 5.0
    #     max_path_occupancy_ratio: 0.05
    #     trajectory_point_step: 4
    #   PreferForwardCritic:
    #     enabled: true
    #     cost_power: 1
    #     cost_weight: 15.0
    
    # # 동적+정적 DWB (남욱 5/16)
    # FollowPath:
    #   plugin: "dwb_core::DWBLocalPlanner"
    #   debug_trajectory_details: True
    #   min_vel_x: 0.2
    #   max_vel_x: 1.0
    #   min_vel_y: 0.0
    #   max_vel_y: 0.0
    #   min_speed_xy: 0.0
    #   max_speed_xy: 0.5
    #   min_speed_theta: 0.0
    #   max_vel_theta: 0.7
    #   acc_lim_x: 1.0
    #   acc_lim_y: 0.0
    #   acc_lim_theta: 1.0
    #   decel_lim_x: -1.0
    #   decel_lim_y: 0.0
    #   decel_lim_theta: -1.0
    #   vx_samples: 20
    #   vy_samples: 1
    #   vtheta_samples: 1
    #   sim_time: 2.0
    #   linear_granularity: 0.05
    #   angular_granularity: 0.025
    #   transform_tolerance: 0.2
    #   xy_goal_tolerance: 0.3
    #   trans_stopped_velocity: 0.1
    #   short_circuit_trajectory_evaluation: True
    #   stateful: True
    #   critics: ["Oscillation", "BaseObstacle", "GoalAlign", "PathAlign", "PathDist", "GoalDist", "ObstacleSpeedCritic"]
    #   ObstacleSpeedCritic:
    #     plugin: "dwb_critics::ObstacleSpeedCritic"
    #     full_speed_distance: 5.0
    #     stop_distance: 2.5
    #     scale: 1000.0
    #     obstacle_state: 0
    #     obstacle_distance: 100.0
    #   BaseObstacle.scale: 0.02
    #   PathAlign.scale: 32.0
    #   PathAlign.forward_point_distance: 0.1
    #   GoalAlign.scale: 32.0
    #   GoalAlign.forward_point_distance: 0.1
    #   PathDist.scale: 32.0
    #   GoalDist.scale: 24.0
    #   # RotateToGoal.scale: 0.0  # 필요시 제외

    # teb (5.19)
    # FollowPath:
    #   plugin: "teb_local_planner::TebLocalPlannerROS"

    #   odom_topic: "odom"
    #   map_frame: "map"
    #   teb_autosize: True
    #   dt_ref: 0.3
    #   dt_hysteresis: 0.1
    #   max_samples: 500

    #   # Robot
    #   max_vel_x: 0.5
    #   max_vel_x_backwards: 0.2
    #   max_vel_theta: 1.0
    #   acc_lim_x: 1.0
    #   acc_lim_theta: 1.0

    #   footprint_model:
    #     type: "circular"
    #     radius: 0.2

    #   # Goal tolerance
    #   xy_goal_tolerance: 0.2
    #   yaw_goal_tolerance: 0.1
    #   free_goal_vel: false

    #   # Obstacles
    #   min_obstacle_dist: 0.4
    #   inflation_dist: 0.6
    #   include_costmap_obstacles: True
    #   costmap_obstacles_behind_robot_dist: 1.5
    #   obstacle_poses_affected: 30

    #   # Optimization
    #   no_inner_iterations: 5
    #   no_outer_iterations: 4
    #   optimization_activate: true
    #   optimization_verbose: false

    #   # Via-points
    #   global_plan_viapoint_sep: 0.3
    #   via_points_ordered: true

    #   # Weight
    #   weight_kinematics_nh: 1000
    #   weight_optimaltime: 1.0
    #   weight_obstacle: 50.0

# # ---------- COSTMAPS ----------
# local_costmap:
#   local_costmap:
#     ros__parameters:
#       update_frequency: 5.0
#       publish_frequency: 2.0
#       global_frame: odom
#       robot_base_frame: base_link
#       use_sim_time: True
#       rolling_window: true
#       width: 3
#       height: 3
#       resolution: 0.05
#       robot_radius: 0.22
#       plugins: ["voxel_layer", "inflation_layer"]
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 3.0
#         inflation_radius: 0.55
#       voxel_layer:
#         plugin: "nav2_costmap_2d::VoxelLayer"
#         enabled: True
#         publish_voxel_map: True
#         origin_z: 0.0
#         z_resolution: 0.05
#         z_voxels: 16
#         max_obstacle_height: 2.0
#         mark_threshold: 0
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#           raytrace_max_range: 3.0
#           raytrace_min_range: 0.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_subscribe_transient_local: True
#       always_send_full_costmap: True

# # costmap (용준 4/28)
# local_costmap:
#   local_costmap:
#     ros__parameters:
#       update_frequency: 5.0
#       publish_frequency: 2.0
#       transform_tolerance: 1.0
#       global_frame: odom
#       robot_base_frame: base_link
#       use_sim_time: False
#       rolling_window: true
#       width: 4
#       height: 4
#       resolution: 0.05
#       robot_radius: 0.1
#       # 기본 static_layer를 추가한 후, inflation_layer와 braille_lane_layer를 순서대로 사용합니다.
#       plugins: ["braille_lane_layer","obstacle_layer", "inflation_layer"]
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 3.0
#         inflation_radius: 0.5
#         enabled: true
#       braille_lane_layer:
#         plugin: "nav2_costmap_2d::BrailleLaneLayer"
#         enabled: true
#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: true
#         observation_sources: "scan curb zone road"
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#           raytrace_max_range: 3.0
#           raytrace_min_range: 0.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#         curb:
#           sensor_frame: camera_color_optical_frame
#           topic: /obstacle_clusters_colored
#           data_type: "PointCloud2"
#           marking: true
#           clearing: true
#           observation_persistence: 0.0
#           min_obstacle_height: -5000.0
#           max_obstacle_height: 5000.0
#           obstacle_max_range: 8.5
#           obstacle_min_range: 0.0
#           raytrace_max_range: 9.0
#           raytrace_min_range: 0.0
#         zone:
#           sensor_frame: camera_color_optical_frame
#           topic: /obstacle_caution_zone
#           data_type: "PointCloud2"
#           marking: true
#           clearing: true
#           observation_persistence: 0.0
#           min_obstacle_height: -5000.0
#           max_obstacle_height: 5000.0
#           obstacle_max_range: 8.5
#           obstacle_min_range: 0.0
#           raytrace_max_range: 9.0
#           raytrace_min_range: 0.0
#         road:
#           sensor_frame: camera_color_optical_frame
#           topic: /obstacle_roadway
#           data_type: "PointCloud2"
#           marking: true
#           clearing: true
#           observation_persistence: 0.0
#           min_obstacle_height: -5000.0
#           max_obstacle_height: 5000.0
#           obstacle_max_range: 8.5
#           obstacle_min_range: 0.0
#           raytrace_max_range: 9.0
#           raytrace_min_range: 0.0
#       always_send_full_costmap: true

# costmap (용준 5/16)
local_costmap:
  local_costmap:
    ros__parameters:
      update_frequency: 5.0
      publish_frequency: 4.0
      transform_tolerance: 1.0  # 5.26 원래 0.1이었으나, gazebo scan data timestamp earlier 문제로 0.5로 늘림
      global_frame: odom
      robot_base_frame: base_link
      use_sim_time: true
      use_maximum: True
      rolling_window: true
      width: 7
      height: 7
      resolution: 0.05
      # robot_radius: 0.3
      footprint: "[[1.0,0.4],[1.0,-0.4],[-0.3,-0.4],[-0.3,0.4]]"

      # 기본 static_layer를 추가한 후, inflation_layer와 braille_lane_layer를 순서대로 사용합니다.
      plugins: ["dynamic_obstacle_layer","road_obstacle_layer","braille_lane_layer","inflation_layer"]
      inflation_layer:
        plugin: "nav2_costmap_2d::InflationLayer"
        cost_scaling_factor: 1.0
        inflation_radius: 0.8
        enabled: true
      braille_lane_layer:
        plugin: "nav2_costmap_2d::BrailleLaneLayer"
        enabled: true
      dynamic_obstacle_layer:
        max_obstacle_height: 10.0      # ← 반드시 추가
        min_obstacle_height: -10.0
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: "scan curb zone"
        scan:
          topic: /scan
          max_obstacle_height: 2.0
          clearing: True
          marking: True
          data_type: "LaserScan"
          raytrace_max_range: 5.0
          raytrace_min_range: 0.0
          obstacle_max_range: 5.0
          obstacle_min_range: 0.0
        curb:
          sensor_frame: camera_color_optical_frame  
          topic: /obstacle_clusters_colored      
          data_type: "PointCloud2"
          marking: true
          clearing: true
          #observation_persistence: 0.1
          min_obstacle_height: -10.0
          max_obstacle_height: 10.0
          obstacle_max_range: 8.5
          obstacle_min_range: 0.0
          raytrace_max_range: 9.0
          raytrace_min_range: 0.0
        zone:
          sensor_frame: camera_color_optical_frame  
          topic: /obstacle_caution_zone     
          data_type: "PointCloud2"
          marking: true
          clearing: true
          #observation_persistence: 0.1
          min_obstacle_height: -10.0
          max_obstacle_height: 10.0
          obstacle_max_range: 8.5
          obstacle_min_range: 0.0
          raytrace_max_range: 9.0
          raytrace_min_range: 0.0
      road_obstacle_layer:
        min_obstacle_height: -10.0
        max_obstacle_height: 10.0
        plugin: "nav2_costmap_2d::ObstacleLayer"
        enabled: true
        observation_sources: "road"
        road:
          sensor_frame: camera_color_optical_frame  
          topic: /obstacle_roadway   
          data_type: "PointCloud2"
          marking: true
          clearing: true
          min_obstacle_height: -10.0
          max_obstacle_height: 10.0
          obstacle_max_range: 8.5
          obstacle_min_range: 0.0
          raytrace_max_range: 9.0
          raytrace_min_range: 0.0
      always_send_full_costmap: True


# global_costmap:
#   global_costmap:
#     ros__parameters:
#       update_frequency: 1.0
#       publish_frequency: 1.0
#       global_frame: map
#       robot_base_frame: base_link
#       use_sim_time: True
#       robot_radius: 0.22
#       resolution: 0.05
#       track_unknown_space: true
#       plugins: ["static_layer", "obstacle_layer", "inflation_layer"]
#       obstacle_layer:
#         plugin: "nav2_costmap_2d::ObstacleLayer"
#         enabled: True
#         observation_sources: scan
#         scan:
#           topic: /scan
#           max_obstacle_height: 2.0
#           clearing: True
#           marking: True
#           data_type: "LaserScan"
#           raytrace_max_range: 3.0
#           raytrace_min_range: 0.0
#           obstacle_max_range: 2.5
#           obstacle_min_range: 0.0
#       static_layer:
#         plugin: "nav2_costmap_2d::StaticLayer"
#         map_subscribe_transient_local: True
#       inflation_layer:
#         plugin: "nav2_costmap_2d::InflationLayer"
#         cost_scaling_factor: 3.0
#         inflation_radius: 0.55
#       always_send_full_costmap: True

# global costmap obstacle, inflation 제거 버전
global_costmap:
  global_costmap:
    ros__parameters:
      update_frequency: 1.0
      publish_frequency: 1.0
      global_frame: map
      robot_base_frame: base_link
      use_sim_time: True
      robot_radius: 0.22
      resolution: 0.05
      track_unknown_space: true
      plugins: ["static_layer"]
      static_layer:
        plugin: "nav2_costmap_2d::StaticLayer"
        map_subscribe_transient_local: True
      always_send_full_costmap: True

# ---------- MAP I/O ----------
map_server:
  ros__parameters:
    use_sim_time: True
    # Overridden via launch arg 'map'. 편집 시 절대경로를 넣어도 무방.
    yaml_filename: ""

map_saver:
  ros__parameters:
    use_sim_time: True
    save_map_timeout: 5.0
    free_thresh_default: 0.25
    occupied_thresh_default: 0.65
    map_subscribe_transient_local: True

# # ---------- GLOBAL PLANNER ----------
# planner_server:
#   ros__parameters:
#     expected_planner_frequency: 20.0
#     use_sim_time: True
#     planner_plugins: ["GridBased"]
#     GridBased:
#       plugin: "nav2_navfn_planner/NavfnPlanner"
#       tolerance: 0.5
#       use_astar: false
#       allow_unknown: true

# smac에 smoothing 여부 조절
planner_server:
  ros__parameters:
    planner_plugins: ["GridBased"]  # 사용 플러그인 이름
    GridBased:
      plugin: "nav2_smac_planner/SmacPlannerHybrid"
      motion_model_for_search: "DUBIN"  # 전진만 가능한 차량
      minimum_turning_radius: 2.0  # 최소 회전 반경 (m)
      angle_quantization_bins: 72  # 360도를 몇 등분할지 (예: 5도 간격)
      allow_reverse: false  # 후진 허용 여부
      max_iterations: 5000000  # 최대 반복 횟수
      collision_check_resolution: 0.1  # 충돌 검사 해상도 (m)
      search_timeout: 30.0  # 경로 탐색 시간 제한 (초)
      smoothing_enabled: false  # 기본 smoothing 활성화
      cost_penalty: 1.2  # 장애물 근처를 피하기 위한 비용 패널티
      traversal_search: false  # 맵의 경계를 벗어나는 경로 허용 여부

# smoother server 파라미터
smoother_server:
  ros__parameters:
    smoother_plugins: ["ConstrainedSmoother"]
    ConstrainedSmoother:
      plugin: "nav2_constrained_smoother/ConstrainedSmoother"
      
      curvature_weight: 4.0        # [1.0 ~ 10.0+]  높을수록 부드러운 곡선 우선
      length_weight: 1.0           # [0.1 ~ 5.0]    경로 짧게 하되 너무 줄이면 곡률 무시함
      obstacle_weight: 15.0        # [5.0 ~ 50.0]   장애물 멀리 회피 유도

      max_curvature: 0.53          # [0.1 ~ 1.5]    차량 물리적 한계에 맞춰 설정
      max_iterations: 300          # [50 ~ 500]     최적화 반복 횟수
      tolerance: 1e-4              # [1e-2 ~ 1e-5]  낮을수록 더 정밀, 하지만 느려짐

      allow_reverse: false         # 전진만 가능하므로 false
      use_costmap: true            # 장애물 회피를 위해 costmap 사용


# # ---------- PATH SMOOTHER ----------
# smoother_server:
#   ros__parameters:
#     use_sim_time: True
#     smoother_plugins: ["simple_smoother"]
#     simple_smoother:
#       plugin: "nav2_smoother::SimpleSmoother"
#       tolerance: 1.0e-10
#       max_its: 1000
#       do_refinement: True

# ---------- ROBOT STATE PUBLISHER ----------
robot_state_publisher:
  ros__parameters:
    use_sim_time: True